@page "/my-dashboard"

@using MySpotify.Portal.Web.Components
@using MySpotify.Portal.DataServices.Spotify.Api;
@using MySpotify.Portal.Models.ResponseModels;
@using MySpotify.Portal.Common.Constants;

@inject ISpotifyHttpServiceProvider SpotifyHttpServiceProvider

<style>
    .fancy-card {
        border-width: 2px;
        border-color: var(--mud-palette-primary);
        border-style: solid;
        padding: var(--custom-padding-medium) !important;
        margin: 16px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        transition: transform 0.3s, box-shadow 0.3s;
    }

    .fancy-card:hover {
        transform: scale(1.05);
        box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
    }
</style>

<MudContainer Class="ma-4">
    <MudGrid>
        <MudItem xs="6">
            @if (PlayListsItems == null)
            {
                <p><em>Loading...</em></p>
            }
            else
            {
                <FeaturedPlaylistsCard PlayListsItems=@PlayListsItems />
            }
        </MudItem>

        <MudItem xs="6">
            @if (TopArtistsItems == null)
            {
                <p><em>Loading...</em></p>
            }
            else
            {
                <TopArtistsCard TopArtistsItems=@TopArtistsItems />
            }
        </MudItem>

        <MudFlexBreak />

        <MudItem xs="6">
            <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">Two</MudPaper>
        </MudItem>
        <MudItem xs="6">
            <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">Three</MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private IEnumerable<Item>? PlayListsItems;
    private IEnumerable<Item>? TopArtistsItems;

    protected override async Task OnInitializedAsync()
    {
        var serviceplayLists = await SpotifyHttpServiceProvider.GetServiceAsync<PlaylistResponse>()
            .ConfigureAwait(false);

        var playListsResponse = await serviceplayLists.GetAsync(PathSegment.PopularPlayLists)
            .ConfigureAwait(false);

        PlayListsItems = playListsResponse.Playlists!.Items!.Take(5);

        var serviceTopArtists = await SpotifyHttpServiceProvider.GetServiceAsync<TopArtistResponse>()
            .ConfigureAwait(false);

        var topArtistsResponse = await serviceTopArtists.GetAsync("me/top/artists", TopArtistsQueryParams())
            .ConfigureAwait(false);

        TopArtistsItems = topArtistsResponse.Items!;
    }

    private static object TopArtistsQueryParams() =>
        new
        {
            limit = 5,
            offset = 0
        };
}